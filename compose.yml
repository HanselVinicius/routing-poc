services:

  db:
    image: postgres:14.3
    container_name: database
    environment:
      POSTGRES_USER: example
      PGUSER: example
      POSTGRES_PASSWORD: example
    volumes:
      - pgdata:/var/lib/postgresql/data 
    ports:
     - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - 8080:8080
  nginx:
    image: nginx:1.27.5-alpine
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend:/usr/share/nginx/html
  api:
    build:
      context: ./backend/routing-poc-backend
      dockerfile: Dockerfile
    container_name: node-app
    environment:
      - INSTANCE_ID=root
      - PORT=3000
      - DB_USER=example
      - DB_PASSWORD=example
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=routing_poc
    expose:
      - "3000"
    depends_on:
      - db

  api-replica:
    build:
      context: ./backend/routing-poc-backend
      dockerfile: Dockerfile
    container_name: node-app-replica
    environment:
      - INSTANCE_ID=replica
      - PORT=3000
      - DB_USER=example
      - DB_PASSWORD=example
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=routing_poc
    expose:
      - "3000"
    depends_on:
      - db
  
    

volumes:
  pgdata: